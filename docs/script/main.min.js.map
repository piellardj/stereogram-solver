{"version":3,"sources":["webpack://stereogram-solver/./src/ts/input-image.ts","webpack://stereogram-solver/./src/ts/processing.ts","webpack://stereogram-solver/./src/ts/visualization.ts","webpack://stereogram-solver/webpack/bootstrap","webpack://stereogram-solver/./src/ts/main.ts"],"names":["onChangeObservers","this","container","document","createElement","id","classList","add","presetSelect","options","buildOption","value","label","option","select","defaultOption","disabled","hidden","appendChild","buildSelect","addEventListener","onPresetChange","presetContainer","presetLabel","htmlFor","textContent","uploadFileButton","fileInputContainer","type","accept","event","stopPropagation","files","length","FileReader","onload","image","Image","loadedImage","callObservers","src","result","readAsDataURL","urlInput","urlInputContainer","inputContainer","placeholder","urlLoadButton","loadImage","preset","url","Page","version","startingImage","div","getElementById","errorsSection","setFailedToLoadError","observer","InputImage","canvas","context","getContext","detectBasePeriod","width","height","drawImage","imageData","getImageData","testedLines","delta","i","push","Math","floor","computeTestedLines","MAX_DISPLACEMENT_ALLOWED","differences","displacement","Processing","MIN_DISPLACEMENT_ALLOWED","totalDifference","iY","iX","baseIndex","targetIndex","dRed","data","dGreen","dBlue","abs","averageDifference","computeBestDisplacement","highestGradientIndex","highestGradient","gradient","_displacement","textOutputContainer","imageSize","createTextNode","textOutputImageSize","textOuputDisplacement","displacementRange","min","max","step","onNewDisplacement","canvasElement","style","maxWidth","canvasContext","_image","toFixed","update","globalCompositeOperation","setCompositingError","Visualization","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","rawImage","inputImage","visualization","processing","sourceImageSection","description","onNewImage","parentElement","removeChild"],"mappings":"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","file":"main.min.js","sourcesContent":["import \"./page-interface-generated.ts\"\r\n\r\n\r\nfunction setFailedToLoadError(url: string): void {\r\n    const id = \"IMAGE_FAILED_TO_LOAD\";\r\n\r\n    let div = document.getElementById(id);\r\n    if (!div) {\r\n        const errorsSection = document.getElementById(\"errors\");\r\n        div = document.createElement(\"div\");\r\n        div.id = id;\r\n        errorsSection.appendChild(div);\r\n    }\r\n\r\n    div.textContent = `Failed to load image from url: '${url}'.`;\r\n}\r\n\r\ntype Observer = () => unknown;\r\n\r\ninterface ISelectOption {\r\n    value: string;\r\n    label: string;\r\n}\r\n\r\nconst SELECT_DEFAULT_VALUE = \"\";\r\n\r\nfunction buildSelect(options: ISelectOption[]): HTMLSelectElement {\r\n    function buildOption(value: string, label: string): HTMLOptionElement {\r\n        const option = document.createElement(\"option\");\r\n        option.value = value;\r\n        option.label = label;\r\n        return option;\r\n    }\r\n\r\n    const select = document.createElement(\"select\");\r\n    const defaultOption = buildOption(SELECT_DEFAULT_VALUE, \"Choose a preset\");\r\n    defaultOption.disabled = true;\r\n    defaultOption.hidden = true;\r\n    select.appendChild(defaultOption);\r\n    for (const option of options) {\r\n        select.appendChild(buildOption(option.value, option.label));\r\n    }\r\n\r\n    return select;\r\n}\r\n\r\nclass InputImage {\r\n    public readonly onChangeObservers: Observer[] = [];\r\n\r\n    public readonly container: HTMLElement;\r\n\r\n    private readonly presetSelect: HTMLSelectElement;\r\n    private readonly uploadFileButton: HTMLInputElement;\r\n    private readonly urlInput: HTMLInputElement;\r\n    private readonly urlLoadButton: HTMLButtonElement;\r\n\r\n    private loadedImage: HTMLImageElement;\r\n\r\n    public constructor() {\r\n        this.container = document.createElement(\"section\");\r\n        this.container.id = \"input-section\";\r\n        this.container.classList.add(\"contents-section\");\r\n\r\n        {\r\n            this.presetSelect = buildSelect([\r\n                { value: \"shark.jpg\", label: \"Shark\" },\r\n                { value: \"thumbsup.jpg\", label: \"Thumbs up\" },\r\n                { value: \"planet.jpg\", label: \"Planet\" },\r\n                { value: \"dolphins.jpg\", label: \"Dolphins\" },\r\n                { value: \"atomium.jpg\", label: \"Atomium\" },\r\n            ]);\r\n            this.presetSelect.id = \"preset-select\";\r\n            this.presetSelect.addEventListener(\"change\", () => { this.onPresetChange(); });\r\n\r\n            const presetContainer = document.createElement(\"div\");\r\n            presetContainer.classList.add(\"input-row\");\r\n            const presetLabel = document.createElement(\"label\");\r\n            presetLabel.htmlFor = this.presetSelect.id;\r\n            presetLabel.textContent = \"Choose a preset: \";\r\n\r\n            presetContainer.appendChild(presetLabel);\r\n            presetContainer.appendChild(this.presetSelect);\r\n\r\n            this.container.appendChild(presetContainer);\r\n        }\r\n\r\n        {\r\n            this.uploadFileButton = document.createElement(\"input\");\r\n            this.uploadFileButton.id = \"image-upload\";\r\n\r\n            const fileInputContainer = document.createElement(\"div\");\r\n            fileInputContainer.classList.add(\"input-row\");\r\n            const label = document.createElement(\"label\");\r\n            label.htmlFor = this.uploadFileButton.id;\r\n            label.textContent = \"Choose from your computer: \";\r\n            fileInputContainer.appendChild(label);\r\n\r\n            this.uploadFileButton.type = \"file\";\r\n            this.uploadFileButton.accept = \".png,.jpg,.bmp,.webp\";\r\n            this.uploadFileButton.addEventListener(\"change\", (event: Event) => {\r\n                event.stopPropagation();\r\n                const files = this.uploadFileButton.files;\r\n                if (files.length === 1) {\r\n                    const reader = new FileReader();\r\n                    reader.onload = () => {\r\n                        const image = new Image();\r\n                        image.addEventListener(\"load\", () => {\r\n                            this.loadedImage = image;\r\n                            this.presetSelect.value = SELECT_DEFAULT_VALUE;\r\n                            this.callObservers();\r\n                        });\r\n                        image.src = reader.result as string;\r\n                    };\r\n                    reader.readAsDataURL(files[0]);\r\n                }\r\n            }, false);\r\n\r\n            fileInputContainer.appendChild(this.uploadFileButton);\r\n            this.container.appendChild(fileInputContainer);\r\n        }\r\n\r\n        {\r\n            this.urlInput = document.createElement(\"input\");\r\n            this.urlInput.id = \"url-input\";\r\n\r\n            const urlInputContainer = document.createElement(\"div\");\r\n            urlInputContainer.classList.add(\"input-row\");\r\n            const label = document.createElement(\"label\");\r\n            label.htmlFor = this.urlInput.id;\r\n            label.textContent = \"Choose from the Internet: \";\r\n            urlInputContainer.appendChild(label);\r\n\r\n            const inputContainer = document.createElement(\"div\");\r\n            this.urlInput.type = \"text\";\r\n            this.urlInput.placeholder = \"Image url...\";\r\n            inputContainer.appendChild(this.urlInput);\r\n\r\n            this.urlLoadButton = document.createElement(\"button\");\r\n            this.urlLoadButton.textContent = \"Load from URL\";\r\n            inputContainer.appendChild(this.urlLoadButton);\r\n\r\n            this.urlLoadButton.addEventListener(\"click\", () => {\r\n                this.loadImage(this.urlInput.value);\r\n                this.presetSelect.value = SELECT_DEFAULT_VALUE;\r\n                this.uploadFileButton.value = \"\";\r\n            })\r\n\r\n            urlInputContainer.appendChild(inputContainer);\r\n            this.container.appendChild(urlInputContainer);\r\n        }\r\n\r\n        this.onPresetChange();\r\n    }\r\n\r\n    public get image(): HTMLImageElement {\r\n        return this.loadedImage;\r\n    }\r\n\r\n    private onPresetChange(): void {\r\n        const preset = this.presetSelect.value;\r\n        if (preset) {\r\n            const url = `resources/images/${preset}?v=${Page.version}`;\r\n            this.loadImage(url);\r\n            this.uploadFileButton.value = \"\";\r\n        }\r\n    }\r\n\r\n    private loadImage(url: string): void {\r\n        const startingImage = new Image();\r\n        startingImage.addEventListener(\"load\", () => {\r\n            this.loadedImage = startingImage;\r\n            this.callObservers();\r\n        });\r\n        startingImage.addEventListener(\"error\", () => {\r\n            setFailedToLoadError(url);\r\n        });\r\n        startingImage.src = url;\r\n    }\r\n\r\n    private callObservers(): void {\r\n        for (const observer of this.onChangeObservers) {\r\n            observer();\r\n        }\r\n    }\r\n}\r\n\r\nexport {\r\n    InputImage,\r\n};\r\n","\r\n\r\nclass Processing {\r\n    private readonly canvas: HTMLCanvasElement;\r\n    private readonly context: CanvasRenderingContext2D;\r\n\r\n    private static readonly MIN_DISPLACEMENT_ALLOWED = 10;\r\n\r\n    public constructor() {\r\n        this.canvas = document.createElement(\"canvas\");\r\n        this.context = this.canvas.getContext(\"2d\");\r\n    }\r\n\r\n    public detectBasePeriod(image: HTMLImageElement): number {\r\n        this.canvas.width = image.width;\r\n        this.canvas.height = image.height;\r\n        this.context.drawImage(image, 0, 0);\r\n        const imageData = this.context.getImageData(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n        const MAX_TESTED_LINES_COUNT = 50;\r\n        const computeTestedLines = (): number[] => {\r\n            const result: number[] = [];\r\n            const delta = (imageData.height < MAX_TESTED_LINES_COUNT) ? 1 : (imageData.height / MAX_TESTED_LINES_COUNT);\r\n            for (let i = 0; i < imageData.height; i += delta) {\r\n                result.push(Math.floor(i));\r\n            }\r\n            return result;\r\n        };\r\n\r\n        const testedLines = computeTestedLines();\r\n\r\n        const MAX_DISPLACEMENT_ALLOWED = imageData.width / 3;\r\n\r\n        const differences = []; // displacement=0 is considered as unavailable so set a high value for it\r\n\r\n        for (let displacement = Processing.MIN_DISPLACEMENT_ALLOWED; displacement <= MAX_DISPLACEMENT_ALLOWED; displacement++) {\r\n            let totalDifference = 0;\r\n            for (const iY of testedLines) {\r\n                for (let iX = displacement; iX < imageData.width; iX++) {\r\n                    const baseIndex = 4 * (iX + iY * imageData.width);\r\n                    const targetIndex = baseIndex - 4 * displacement;\r\n\r\n                    const dRed = imageData.data[baseIndex] - imageData.data[targetIndex];\r\n                    const dGreen = imageData.data[baseIndex + 1] - imageData.data[targetIndex + 1];\r\n                    const dBlue = imageData.data[baseIndex + 2] - imageData.data[targetIndex + 2];\r\n\r\n                    const difference = (Math.abs(dRed) + Math.abs(dGreen) + Math.abs(dBlue)) / 3;\r\n                    totalDifference += difference;\r\n                }\r\n            }\r\n\r\n            const nbPixels = (testedLines.length * (imageData.width - displacement));\r\n            const averageDifference = totalDifference / nbPixels;\r\n            differences.push(averageDifference);\r\n        }\r\n\r\n        const bestDisplacement = this.computeBestDisplacement(differences) + Processing.MIN_DISPLACEMENT_ALLOWED;\r\n        return bestDisplacement;\r\n    }\r\n\r\n    private computeBestDisplacement(differences: number[]): number {\r\n        // when reaching the correct delta, on most stereograms the total difference is at its lowest, and goes right up just after\r\n        // so try to detect this point\r\n        let highestGradientIndex = 1;\r\n        let highestGradient = -1;\r\n        for (let i = 2; i < differences.length - 1; i++) {\r\n            const gradient = differences[i + 1] - differences[i];\r\n\r\n            // console.log(`${i + Processing.MIN_DISPLACEMENT_ALLOWED}:\\t${differences[i]}\\t${gradient}`);\r\n            if (gradient > highestGradient) {\r\n                highestGradientIndex = i;\r\n                highestGradient = gradient;\r\n            }\r\n        }\r\n\r\n        // The gradient helps determine the end of the lowest plateau.\r\n        // Once found, check what was just before because maybe it was better\r\n        for (let i = 0; i < 3; i++) {\r\n            if (highestGradientIndex > 0 && differences[highestGradientIndex - 1] < differences[highestGradientIndex]) {\r\n                highestGradientIndex--;\r\n            }\r\n        }\r\n        return highestGradientIndex;\r\n    }\r\n}\r\n\r\nexport {\r\n    Processing,\r\n};\r\n","function setCompositingError(): void {\r\n    const id = \"COMPOSITING_ERROR\";\r\n\r\n    if (!document.getElementById(id)) {\r\n        const errorsSection = document.getElementById(\"errors\");\r\n        const div = document.createElement(\"div\");\r\n        div.id = id;\r\n        div.textContent = \"Your browser does not support the 'difference' globalCompositeOperation. This project will not run as expected.\";\r\n        errorsSection.appendChild(div);\r\n    }\r\n\r\n}\r\n\r\nclass Visualization {\r\n    public readonly container: HTMLElement;\r\n\r\n    private readonly displacementRange: HTMLInputElement;\r\n    private readonly canvasElement: HTMLCanvasElement;\r\n    private readonly canvasContext: CanvasRenderingContext2D;\r\n\r\n    private readonly textOutputImageSize: HTMLSpanElement;\r\n    private readonly textOuputDisplacement: HTMLSpanElement;\r\n\r\n    private _displacement: number = 1;\r\n    private _image: HTMLImageElement;\r\n\r\n    public constructor() {\r\n        this.container = document.createElement(\"section\");\r\n        this.container.classList.add(\"contents-section\");\r\n\r\n        {\r\n            const textOutputContainer = document.createElement(\"div\");\r\n\r\n            const imageSize = document.createElement(\"div\");\r\n            imageSize.appendChild(document.createTextNode(\"Image size: \"));\r\n            this.textOutputImageSize = document.createElement(\"span\");\r\n            imageSize.appendChild(this.textOutputImageSize);\r\n            textOutputContainer.appendChild(imageSize);\r\n\r\n            const displacement = document.createElement(\"div\");\r\n            displacement.appendChild(document.createTextNode(\"Displacement: \"));\r\n            this.textOuputDisplacement = document.createElement(\"span\");\r\n            displacement.appendChild(this.textOuputDisplacement);\r\n            textOutputContainer.appendChild(displacement);\r\n\r\n            this.container.appendChild(textOutputContainer);\r\n        }\r\n\r\n        {\r\n            this.displacementRange = document.createElement(\"input\");\r\n            this.displacementRange.classList.add(\"full-width-range\");\r\n            this.displacementRange.type = \"range\";\r\n            this.displacementRange.min = \"0\";\r\n            this.displacementRange.max = \"100\";\r\n            this.displacementRange.step = \"1\";\r\n            this.displacementRange.value = \"1\";\r\n            const onNewDisplacement = () => {\r\n                this.displacement = +this.displacementRange.value;\r\n            };\r\n            this.displacementRange.addEventListener(\"change\", onNewDisplacement);\r\n            this.displacementRange.addEventListener(\"input\", onNewDisplacement);\r\n            this.container.appendChild(this.displacementRange);\r\n        }\r\n\r\n        this.canvasElement = document.createElement(\"canvas\");\r\n        this.canvasElement.style.maxWidth = \"100%\";\r\n        this.canvasElement.width = 100;\r\n        this.canvasElement.height = 100;\r\n        this.container.appendChild(this.canvasElement);\r\n\r\n        this.canvasContext = this.canvasElement.getContext(\"2d\");\r\n    }\r\n\r\n    public set image(image: HTMLImageElement) {\r\n        this._image = image;\r\n\r\n        this.canvasElement.width = this._image.width;\r\n        this.canvasElement.height = this._image.height;\r\n\r\n        this.displacementRange.max = this.canvasElement.width.toFixed(0);\r\n\r\n        this.textOutputImageSize.textContent = `${this._image.width}x${this._image.height}`;\r\n\r\n        this.update();\r\n    }\r\n\r\n    public set displacement(displacement: number) {\r\n        this._displacement = displacement;\r\n        this.displacementRange.value = displacement.toFixed(0);\r\n\r\n        this.textOuputDisplacement.textContent = `${displacement.toFixed(0)}px`;\r\n        this.update();\r\n    }\r\n\r\n    private update(): void {\r\n        if (this._image) {\r\n            this.canvasContext.globalCompositeOperation = \"source-over\";\r\n            this.canvasContext.drawImage(this._image, 0, 0, this.canvasElement.width, this.canvasElement.height);\r\n\r\n            if (this._displacement > 0) {\r\n                this.canvasContext.globalCompositeOperation = \"difference\";\r\n                if (this.canvasContext.globalCompositeOperation !== \"difference\") {\r\n                    setCompositingError();\r\n                }\r\n\r\n                this.canvasContext.drawImage(this._image, this._displacement, 0, this.canvasElement.width, this.canvasElement.height);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport {\r\n    Visualization,\r\n};\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { InputImage } from \"./input-image\";\r\nimport { Processing } from \"./processing\";\r\nimport { Visualization } from \"./visualization\";\r\n\r\n\r\nconst container = document.getElementById(\"contents\");\r\n\r\nconst inputImage = new InputImage();\r\nconst visualization = new Visualization();\r\nconst processing = new Processing();\r\n\r\ncontainer.appendChild(inputImage.container);\r\ncontainer.appendChild(visualization.container);\r\n\r\nlet rawImage: HTMLImageElement;\r\nconst sourceImageSection = document.createElement(\"section\");\r\n{\r\n    sourceImageSection.classList.add(\"contents-section\");\r\n    const description = document.createElement(\"div\");\r\n    description.textContent = \"Source image:\";\r\n    sourceImageSection.appendChild(description);\r\n    sourceImageSection.appendChild(description);\r\n    container.appendChild(sourceImageSection);\r\n}\r\n\r\nfunction onNewImage(): void {\r\n    const image = inputImage.image;\r\n    if (image) {\r\n        visualization.image = image;\r\n        visualization.displacement = processing.detectBasePeriod(image);\r\n\r\n        if (rawImage) {\r\n            rawImage.parentElement.removeChild(rawImage);\r\n        }\r\n        rawImage = image;\r\n        rawImage.style.maxWidth = \"100%\";\r\n        sourceImageSection.appendChild(rawImage);\r\n    }\r\n}\r\n\r\ninputImage.onChangeObservers.push(onNewImage);\r\nonNewImage();\r\n"],"sourceRoot":""}