{"version":3,"file":"main.min.js","mappings":"oDAGA,SAASA,EAAqBC,GAC1B,IAAMC,EAAK,uBAEPC,EAAMC,SAASC,eAAeH,GAClC,IAAKC,EAAK,CACN,IAAMG,EAAgBF,SAASC,eAAe,WAC9CF,EAAMC,SAASG,cAAc,QACzBL,GAAKA,EACTI,EAAcE,YAAYL,E,CAGlB,OAARF,EACAE,EAAIM,MAAMC,QAAU,QAEpBP,EAAIM,MAAMC,QAAU,GACpBP,EAAIQ,YAAc,0CAAmCV,EAAG,MAEhE,C,qEApBA,OA6BA,IAAMW,EAAuB,GAsB7B,aAYI,wBAXgB,KAAAC,kBAAgC,GAY5CC,KAAKC,UAAYX,SAASG,cAAc,WACxCO,KAAKC,UAAUb,GAAK,gBACpBY,KAAKC,UAAUC,UAAUC,IAAI,oBAGzBH,KAAKI,aAtCjB,SAAqBC,GACjB,SAASC,EAAYC,EAAeC,GAChC,IAAMC,EAASnB,SAASG,cAAc,UAGtC,OAFAgB,EAAOF,MAAQA,EACfE,EAAOD,MAAQA,EACRC,CACX,CAEA,IAAMC,EAASpB,SAASG,cAAc,UAChCkB,EAAgBL,EAAYR,EAAsB,mBACxDa,EAAcC,UAAW,EACzBD,EAAcE,QAAS,EACvBH,EAAOhB,YAAYiB,GACnB,IAAqB,UAyBmB,CAC5B,CAAEJ,MAAO,YAAaC,MAAO,SAC7B,CAAED,MAAO,eAAgBC,MAAO,aAChC,CAAED,MAAO,aAAcC,MAAO,UAC9B,CAAED,MAAO,eAAgBC,MAAO,YAChC,CAAED,MAAO,cAAeC,MAAO,YA9BtB,eAAS,CAAzB,IAAMC,EAAM,KACbC,EAAOhB,YAAYY,EAAYG,EAAOF,MAAOE,EAAOD,O,CAGxD,OAAOE,CACX,CAoBgCI,GAOpBd,KAAKI,aAAahB,GAAK,gBACvBY,KAAKI,aAAaW,iBAAiB,UAAU,WAAQ,EAAKC,gBAAkB,IAE5E,IAAMC,EAAkB3B,SAASG,cAAc,OAC/CwB,EAAgBf,UAAUC,IAAI,aAC9B,IAAMe,EAAc5B,SAASG,cAAc,SAC3CyB,EAAYC,QAAUnB,KAAKI,aAAahB,GACxC8B,EAAYrB,YAAc,oBAE1BoB,EAAgBvB,YAAYwB,GAC5BD,EAAgBvB,YAAYM,KAAKI,cAEjCJ,KAAKC,UAAUP,YAAYuB,GAI3BjB,KAAKoB,iBAAmB9B,SAASG,cAAc,SAC/CO,KAAKoB,iBAAiBhC,GAAK,eAE3B,IAAMiC,EAAqB/B,SAASG,cAAc,OAClD4B,EAAmBnB,UAAUC,IAAI,cAC3BK,EAAQlB,SAASG,cAAc,UAC/B0B,QAAUnB,KAAKoB,iBAAiBhC,GACtCoB,EAAMX,YAAc,8BACpBwB,EAAmB3B,YAAYc,GAE/BR,KAAKoB,iBAAiBE,KAAO,OAC7BtB,KAAKoB,iBAAiBG,OAAS,uBAC/BvB,KAAKoB,iBAAiBL,iBAAiB,UAAU,SAACS,GAC9CA,EAAMC,kBACN,IAAMC,EAAQ,EAAKN,iBAAiBM,MACpC,GAAqB,IAAjBA,EAAMC,OAAc,CACpB,IAAM,EAAS,IAAIC,WACnB,EAAOC,OAAS,WACZ,IAAMC,EAAQ,IAAIC,MAClBD,EAAMf,iBAAiB,QAAQ,WAC3B,EAAKiB,YAAcF,EACnB,EAAK1B,aAAaG,MAAQT,EAC1B,EAAKmC,eACT,IACAH,EAAMI,IAAM,EAAOC,MACvB,EACA,EAAOC,cAAcV,EAAM,G,CAEnC,IAAG,GAEHL,EAAmB3B,YAAYM,KAAKoB,kBACpCpB,KAAKC,UAAUP,YAAY2B,GAI3BrB,KAAKqC,SAAW/C,SAASG,cAAc,SACvCO,KAAKqC,SAASjD,GAAK,YAEnB,IAEMoB,EAFA8B,EAAoBhD,SAASG,cAAc,OACjD6C,EAAkBpC,UAAUC,IAAI,cAC1BK,EAAQlB,SAASG,cAAc,UAC/B0B,QAAUnB,KAAKqC,SAASjD,GAC9BoB,EAAMX,YAAc,6BACpByC,EAAkB5C,YAAYc,GAE9B,IAAM+B,EAAiBjD,SAASG,cAAc,OAC9CO,KAAKqC,SAASf,KAAO,OACrBtB,KAAKqC,SAASG,YAAc,eAC5BD,EAAe7C,YAAYM,KAAKqC,UAEhCrC,KAAKyC,cAAgBnD,SAASG,cAAc,UAC5CO,KAAKyC,cAAc5C,YAAc,gBACjC0C,EAAe7C,YAAYM,KAAKyC,eAEhCzC,KAAKyC,cAAc1B,iBAAiB,SAAS,WACzC,EAAK2B,qBAAqB,EAAKL,SAAS9B,OACxC,EAAKH,aAAaG,MAAQT,EAC1B,EAAKsB,iBAAiBb,MAAQ,EAClC,IAEA+B,EAAkB5C,YAAY6C,GAIlCvC,KAAKgB,gBACT,CA4DJ,OA1DI,sBAAW,oBAAK,C,IAAhB,WACI,OAAOhB,KAAKgC,WAChB,E,gCAEQ,YAAAhB,eAAR,WACI,IAAM2B,EAAS3C,KAAKI,aAAaG,MACjC,GAAIoC,EAAQ,CACR,IAAMxD,EAAM,2BAAoBwD,EAAM,cAAMC,KAAKC,SACjD7C,KAAK8C,UAAU3D,GACfa,KAAKoB,iBAAiBb,MAAQ,E,CAEtC,EAEQ,YAAAuC,UAAR,SAAkB3D,GAAlB,WACU4D,EAAgB,IAAIhB,MAC1BgB,EAAchC,iBAAiB,QAAQ,WACnC7B,EAAqB,MAErB,EAAK8C,YAAce,EACnB,EAAKd,eACT,IACAc,EAAchC,iBAAiB,SAAS,WACpC7B,EAAqBC,EACzB,IACA4D,EAAcb,IAAM/C,CACxB,EAEQ,YAAAuD,qBAAR,SAA6BvD,GAA7B,WAKU6D,EAAM,IAAIC,eAChBD,EAAIjC,iBAAiB,QAAQ,WACzB,IAAMmC,EAAS,IAAItB,WACnBsB,EAAOnC,iBAAiB,WAAW,WAG/B,EAAK+B,UAAUI,EAAOf,OAAOgB,WACjC,IACAD,EAAOd,cAAcY,EAAII,SAC7B,IAGAJ,EAAIK,KAAK,MAAO,8CAAuClE,IAEvD6D,EAAIM,iBAAiB,gBAAiB,QAGtCN,EAAIO,aAAe,OACnBP,EAAIQ,MACR,EAEQ,YAAAvB,cAAR,WACI,IAAuB,UAAAjC,KAAKD,kBAAL,gBACnB0D,EADe,OAGvB,EACJ,EAtKA,GAyKI,EAAAC,WAAAA,C,0GC1NJ,iBAMI,aACI1D,KAAK2D,OAASrE,SAASG,cAAc,UACrCO,KAAK4D,QAAU5D,KAAK2D,OAAOE,WAAW,KAC1C,CAyEJ,OAvEW,YAAAC,iBAAP,SAAwBhC,GACpB9B,KAAK2D,OAAOI,MAAQjC,EAAMiC,MAC1B/D,KAAK2D,OAAOK,OAASlC,EAAMkC,OAC3BhE,KAAK4D,QAAQK,UAAUnC,EAAO,EAAG,GAmBjC,IAlBA,IAAMoC,EAAYlE,KAAK4D,QAAQO,aAAa,EAAG,EAAGnE,KAAK2D,OAAOI,MAAO/D,KAAK2D,OAAOK,QAY3EI,EATqB,WAGvB,IAFA,IAAMjC,EAAmB,GACnBkC,EAASH,EAAUF,OAHE,GAGiC,EAAKE,EAAUF,OAHhD,GAIlBM,EAAI,EAAGA,EAAIJ,EAAUF,OAAQM,GAAKD,EACvClC,EAAOoC,KAAKC,KAAKC,MAAMH,IAE3B,OAAOnC,CACX,CAEoBuC,GAEdC,EAA2BT,EAAUH,MAAQ,EAE7Ca,EAAc,GAEXC,EAAeC,EAAWC,yBAA0BF,GAAgBF,EAA0BE,IAAgB,CAEnH,IADA,IAAIG,EAAkB,EACL,MAAAZ,EAAA,eACb,IADC,IAAMa,EAAE,KACAC,EAAKL,EAAcK,EAAKhB,EAAUH,MAAOmB,IAAM,CACpD,IAAMC,EAAY,GAAKD,EAAKD,EAAKf,EAAUH,OACrCqB,EAAcD,EAAY,EAAIN,EAE9BQ,EAAOnB,EAAUoB,KAAKH,GAAajB,EAAUoB,KAAKF,GAClDG,EAASrB,EAAUoB,KAAKH,EAAY,GAAKjB,EAAUoB,KAAKF,EAAc,GACtEI,EAAQtB,EAAUoB,KAAKH,EAAY,GAAKjB,EAAUoB,KAAKF,EAAc,GAG3EJ,IADoBR,KAAKiB,IAAIJ,GAAQb,KAAKiB,IAAIF,GAAUf,KAAKiB,IAAID,IAAU,C,CAKnF,IACME,EAAoBV,GADRZ,EAAYzC,QAAUuC,EAAUH,MAAQc,IAE1DD,EAAYL,KAAKmB,E,CAIrB,OADyB1F,KAAK2F,wBAAwBf,GAAeE,EAAWC,wBAEpF,EAEQ,YAAAY,wBAAR,SAAgCf,GAK5B,IAFA,IAAIgB,EAAuB,EACvBC,GAAmB,EACdvB,EAAI,EAAGA,EAAIM,EAAYjD,OAAS,EAAG2C,IAAK,CAC7C,IAAMwB,EAAWlB,EAAYN,EAAI,GAAKM,EAAYN,GAG9CwB,EAAWD,IACXD,EAAuBtB,EACvBuB,EAAkBC,E,CAM1B,IAASxB,EAAI,EAAGA,EAAI,EAAGA,IACfsB,EAAuB,GAAKhB,EAAYgB,EAAuB,GAAKhB,EAAYgB,IAChFA,IAGR,OAAOA,CACX,EA7EwB,EAAAb,yBAA2B,GA8EvD,C,CAlFA,GAqFI,EAAAD,WAAAA,C,4FC1EJ,iBAaI,wBAHQ,KAAAiB,cAAwB,EAI5B/F,KAAKC,UAAYX,SAASG,cAAc,WACxCO,KAAKC,UAAUC,UAAUC,IAAI,oBAGzB,IAAM6F,EAAsB1G,SAASG,cAAc,OAE7CwG,EAAY3G,SAASG,cAAc,OACzCwG,EAAUvG,YAAYJ,SAAS4G,eAAe,iBAC9ClG,KAAKmG,oBAAsB7G,SAASG,cAAc,QAClDwG,EAAUvG,YAAYM,KAAKmG,qBAC3BH,EAAoBtG,YAAYuG,GAEhC,IAAMpB,EAAevF,SAASG,cAAc,OAC5CoF,EAAanF,YAAYJ,SAAS4G,eAAe,mBACjDlG,KAAKoG,sBAAwB9G,SAASG,cAAc,QACpDoF,EAAanF,YAAYM,KAAKoG,uBAC9BJ,EAAoBtG,YAAYmF,GAEhC7E,KAAKC,UAAUP,YAAYsG,GAI3BhG,KAAKqG,kBAAoB/G,SAASG,cAAc,SAChDO,KAAKqG,kBAAkBnG,UAAUC,IAAI,oBACrCH,KAAKqG,kBAAkB/E,KAAO,QAC9BtB,KAAKqG,kBAAkBC,IAAM,IAC7BtG,KAAKqG,kBAAkBE,IAAM,MAC7BvG,KAAKqG,kBAAkBG,KAAO,IAC9BxG,KAAKqG,kBAAkB9F,MAAQ,IAC/B,IAAMkG,EAAoB,WACtB,EAAK5B,cAAgB,EAAKwB,kBAAkB9F,KAChD,EACAP,KAAKqG,kBAAkBtF,iBAAiB,SAAU0F,GAClDzG,KAAKqG,kBAAkBtF,iBAAiB,QAAS0F,GACjDzG,KAAKC,UAAUP,YAAYM,KAAKqG,mBAGpCrG,KAAK0G,cAAgBpH,SAASG,cAAc,UAC5CO,KAAK0G,cAAc/G,MAAMgH,SAAW,OACpC3G,KAAK0G,cAAc3C,MAAQ,IAC3B/D,KAAK0G,cAAc1C,OAAS,IAC5BhE,KAAKC,UAAUP,YAAYM,KAAK0G,eAEhC1G,KAAK4G,cAAgB5G,KAAK0G,cAAc7C,WAAW,KACvD,CAsCJ,OApCI,sBAAW,oBAAK,C,IAAhB,SAAiB/B,GACb9B,KAAK6G,OAAS/E,EAEd9B,KAAK0G,cAAc3C,MAAQ/D,KAAK6G,OAAO9C,MACvC/D,KAAK0G,cAAc1C,OAAShE,KAAK6G,OAAO7C,OAExChE,KAAKqG,kBAAkBE,IAAMvG,KAAK0G,cAAc3C,MAAM+C,QAAQ,GAE9D9G,KAAKmG,oBAAoBtG,YAAc,UAAGG,KAAK6G,OAAO9C,MAAK,YAAI/D,KAAK6G,OAAO7C,QAE3EhE,KAAK+G,QACT,E,gCAEA,sBAAW,2BAAY,C,IAAvB,SAAwBlC,GACpB7E,KAAK+F,cAAgBlB,EACrB7E,KAAKqG,kBAAkB9F,MAAQsE,EAAaiC,QAAQ,GAEpD9G,KAAKoG,sBAAsBvG,YAAc,UAAGgF,EAAaiC,QAAQ,GAAE,MACnE9G,KAAK+G,QACT,E,gCAEQ,YAAAA,OAAR,WACQ/G,KAAK6G,SACL7G,KAAK4G,cAAcI,yBAA2B,cAC9ChH,KAAK4G,cAAc3C,UAAUjE,KAAK6G,OAAQ,EAAG,EAAG7G,KAAK0G,cAAc3C,MAAO/D,KAAK0G,cAAc1C,QAEzFhE,KAAK+F,cAAgB,IACrB/F,KAAK4G,cAAcI,yBAA2B,aACM,eAAhDhH,KAAK4G,cAAcI,0BArGvC,WACI,IAAM5H,EAAK,oBAEX,IAAKE,SAASC,eAAeH,GAAK,CAC9B,IAAMI,EAAgBF,SAASC,eAAe,UACxCF,EAAMC,SAASG,cAAc,OACnCJ,EAAID,GAAKA,EACTC,EAAIQ,YAAc,kHAClBL,EAAcE,YAAYL,E,CAGlC,CA2FoB4H,GAGJjH,KAAK4G,cAAc3C,UAAUjE,KAAK6G,OAAQ7G,KAAK+F,cAAe,EAAG/F,KAAK0G,cAAc3C,MAAO/D,KAAK0G,cAAc1C,SAG1H,EACJ,EAhGA,GAmGI,EAAAkD,cAAAA,C,GC/GAC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaE,QAGrB,IAAIC,EAASN,EAAyBE,GAAY,CAGjDG,QAAS,CAAC,GAOX,OAHAE,EAAoBL,GAAUI,EAAQA,EAAOD,QAASJ,GAG/CK,EAAOD,OACf,E,WCtBA,IAcIG,EAdJ,SACA,SACA,SAGM1H,EAAYX,SAASC,eAAe,YAEpCqI,EAAa,IAAI,EAAAlE,WACjBmE,EAAgB,IAAI,EAAAX,cACpBY,EAAa,IAAI,EAAAhD,WAEvB7E,EAAUP,YAAYkI,EAAW3H,WACjCA,EAAUP,YAAYmI,EAAc5H,WAGpC,IAAM8H,EAAqBzI,SAASG,cAAc,WAE9CsI,EAAmB7H,UAAUC,IAAI,oBACjC,IAAM6H,EAAc1I,SAASG,cAAc,OAO/C,SAASwI,IACL,IAAMnG,EAAQ8F,EAAW9F,MACrBA,IACA+F,EAAc/F,MAAQA,EACtB+F,EAAchD,aAAeiD,EAAWhE,iBAAiBhC,GAErD6F,GACAA,EAASO,cAAcC,YAAYR,IAEvCA,EAAW7F,GACFnC,MAAMgH,SAAW,OAC1BoB,EAAmBrI,YAAYiI,GAEvC,CAnBIK,EAAYnI,YAAc,gBAC1BkI,EAAmBrI,YAAYsI,GAC/BD,EAAmBrI,YAAYsI,GAC/B/H,EAAUP,YAAYqI,GAkB1BH,EAAW7H,kBAAkBwE,KAAK0D,GAClCA,G","sources":["webpack://stereogram-solver/./src/ts/input-image.ts","webpack://stereogram-solver/./src/ts/processing.ts","webpack://stereogram-solver/./src/ts/visualization.ts","webpack://stereogram-solver/webpack/bootstrap","webpack://stereogram-solver/./src/ts/main.ts"],"sourcesContent":["import \"./page-interface-generated.ts\"\r\n\r\n\r\nfunction setFailedToLoadError(url: string | null): void {\r\n    const id = \"IMAGE_FAILED_TO_LOAD\";\r\n\r\n    let div = document.getElementById(id);\r\n    if (!div) {\r\n        const errorsSection = document.getElementById(\"errors\");\r\n        div = document.createElement(\"div\");\r\n        div.id = id;\r\n        errorsSection.appendChild(div);\r\n    }\r\n\r\n    if (url === null) {\r\n        div.style.display = \"none\";\r\n    } else {\r\n        div.style.display = \"\";\r\n        div.textContent = `Failed to load image from url: '${url}'.`;\r\n    }\r\n}\r\n\r\ntype Observer = () => unknown;\r\n\r\ninterface ISelectOption {\r\n    value: string;\r\n    label: string;\r\n}\r\n\r\nconst SELECT_DEFAULT_VALUE = \"\";\r\n\r\nfunction buildSelect(options: ISelectOption[]): HTMLSelectElement {\r\n    function buildOption(value: string, label: string): HTMLOptionElement {\r\n        const option = document.createElement(\"option\");\r\n        option.value = value;\r\n        option.label = label;\r\n        return option;\r\n    }\r\n\r\n    const select = document.createElement(\"select\");\r\n    const defaultOption = buildOption(SELECT_DEFAULT_VALUE, \"Choose a preset\");\r\n    defaultOption.disabled = true;\r\n    defaultOption.hidden = true;\r\n    select.appendChild(defaultOption);\r\n    for (const option of options) {\r\n        select.appendChild(buildOption(option.value, option.label));\r\n    }\r\n\r\n    return select;\r\n}\r\n\r\nclass InputImage {\r\n    public readonly onChangeObservers: Observer[] = [];\r\n\r\n    public readonly container: HTMLElement;\r\n\r\n    private readonly presetSelect: HTMLSelectElement;\r\n    private readonly uploadFileButton: HTMLInputElement;\r\n    private readonly urlInput: HTMLInputElement;\r\n    private readonly urlLoadButton: HTMLButtonElement;\r\n\r\n    private loadedImage: HTMLImageElement;\r\n\r\n    public constructor() {\r\n        this.container = document.createElement(\"section\");\r\n        this.container.id = \"input-section\";\r\n        this.container.classList.add(\"contents-section\");\r\n\r\n        {\r\n            this.presetSelect = buildSelect([\r\n                { value: \"shark.jpg\", label: \"Shark\" },\r\n                { value: \"thumbsup.jpg\", label: \"Thumbs up\" },\r\n                { value: \"planet.jpg\", label: \"Planet\" },\r\n                { value: \"dolphins.jpg\", label: \"Dolphins\" },\r\n                { value: \"atomium.jpg\", label: \"Atomium\" },\r\n            ]);\r\n            this.presetSelect.id = \"preset-select\";\r\n            this.presetSelect.addEventListener(\"change\", () => { this.onPresetChange(); });\r\n\r\n            const presetContainer = document.createElement(\"div\");\r\n            presetContainer.classList.add(\"input-row\");\r\n            const presetLabel = document.createElement(\"label\");\r\n            presetLabel.htmlFor = this.presetSelect.id;\r\n            presetLabel.textContent = \"Choose a preset: \";\r\n\r\n            presetContainer.appendChild(presetLabel);\r\n            presetContainer.appendChild(this.presetSelect);\r\n\r\n            this.container.appendChild(presetContainer);\r\n        }\r\n\r\n        {\r\n            this.uploadFileButton = document.createElement(\"input\");\r\n            this.uploadFileButton.id = \"image-upload\";\r\n\r\n            const fileInputContainer = document.createElement(\"div\");\r\n            fileInputContainer.classList.add(\"input-row\");\r\n            const label = document.createElement(\"label\");\r\n            label.htmlFor = this.uploadFileButton.id;\r\n            label.textContent = \"Choose from your computer: \";\r\n            fileInputContainer.appendChild(label);\r\n\r\n            this.uploadFileButton.type = \"file\";\r\n            this.uploadFileButton.accept = \".png,.jpg,.bmp,.webp\";\r\n            this.uploadFileButton.addEventListener(\"change\", (event: Event) => {\r\n                event.stopPropagation();\r\n                const files = this.uploadFileButton.files;\r\n                if (files.length === 1) {\r\n                    const reader = new FileReader();\r\n                    reader.onload = () => {\r\n                        const image = new Image();\r\n                        image.addEventListener(\"load\", () => {\r\n                            this.loadedImage = image;\r\n                            this.presetSelect.value = SELECT_DEFAULT_VALUE;\r\n                            this.callObservers();\r\n                        });\r\n                        image.src = reader.result as string;\r\n                    };\r\n                    reader.readAsDataURL(files[0]);\r\n                }\r\n            }, false);\r\n\r\n            fileInputContainer.appendChild(this.uploadFileButton);\r\n            this.container.appendChild(fileInputContainer);\r\n        }\r\n\r\n        {\r\n            this.urlInput = document.createElement(\"input\");\r\n            this.urlInput.id = \"url-input\";\r\n\r\n            const urlInputContainer = document.createElement(\"div\");\r\n            urlInputContainer.classList.add(\"input-row\");\r\n            const label = document.createElement(\"label\");\r\n            label.htmlFor = this.urlInput.id;\r\n            label.textContent = \"Choose from the Internet: \";\r\n            urlInputContainer.appendChild(label);\r\n\r\n            const inputContainer = document.createElement(\"div\");\r\n            this.urlInput.type = \"text\";\r\n            this.urlInput.placeholder = \"Image url...\";\r\n            inputContainer.appendChild(this.urlInput);\r\n\r\n            this.urlLoadButton = document.createElement(\"button\");\r\n            this.urlLoadButton.textContent = \"Load from URL\";\r\n            inputContainer.appendChild(this.urlLoadButton);\r\n\r\n            this.urlLoadButton.addEventListener(\"click\", () => {\r\n                this.loadCrossOriginImage(this.urlInput.value);\r\n                this.presetSelect.value = SELECT_DEFAULT_VALUE;\r\n                this.uploadFileButton.value = \"\";\r\n            })\r\n\r\n            urlInputContainer.appendChild(inputContainer);\r\n            // this.container.appendChild(urlInputContainer);\r\n        }\r\n\r\n        this.onPresetChange();\r\n    }\r\n\r\n    public get image(): HTMLImageElement {\r\n        return this.loadedImage;\r\n    }\r\n\r\n    private onPresetChange(): void {\r\n        const preset = this.presetSelect.value;\r\n        if (preset) {\r\n            const url = `resources/images/${preset}?v=${Page.version}`;\r\n            this.loadImage(url);\r\n            this.uploadFileButton.value = \"\";\r\n        }\r\n    }\r\n\r\n    private loadImage(url: string): void {\r\n        const startingImage = new Image();\r\n        startingImage.addEventListener(\"load\", () => {\r\n            setFailedToLoadError(null);\r\n\r\n            this.loadedImage = startingImage;\r\n            this.callObservers();\r\n        });\r\n        startingImage.addEventListener(\"error\", () => {\r\n            setFailedToLoadError(url);\r\n        });\r\n        startingImage.src = url;\r\n    }\r\n\r\n    private loadCrossOriginImage(url: string): void {\r\n        // Loading and manipulating a cross origin image is tricky\r\n        // because canvas2d APIs such as getImageData() are blocked when the canvas is tainted by a cross origin image\r\n\r\n        // use XMLHttpRequest and not Image directly because I ant to set custom headers\r\n        const xhr = new XMLHttpRequest();\r\n        xhr.addEventListener(\"load\", () => {\r\n            const reader = new FileReader();\r\n            reader.addEventListener(\"loadend\", () => {\r\n                // pass a data url because it does not contain information that the data is cross-origin\r\n                // so the canvas won't be tainted\r\n                this.loadImage(reader.result.toString());\r\n            });\r\n            reader.readAsDataURL(xhr.response);\r\n        });\r\n\r\n        // use a proxy that allows all cross origin\r\n        xhr.open('GET', `https://cors-anywhere.herokuapp.com/${url}`);\r\n        // set this header because the proxy requires it\r\n        xhr.setRequestHeader(\"X-Request-URL\", \"null\");\r\n\r\n        // request data in the data-url form so that it can be later parsed as an image\r\n        xhr.responseType = 'blob';\r\n        xhr.send();\r\n    }\r\n\r\n    private callObservers(): void {\r\n        for (const observer of this.onChangeObservers) {\r\n            observer();\r\n        }\r\n    }\r\n}\r\n\r\nexport {\r\n    InputImage,\r\n};\r\n","\r\n\r\nclass Processing {\r\n    private readonly canvas: HTMLCanvasElement;\r\n    private readonly context: CanvasRenderingContext2D;\r\n\r\n    private static readonly MIN_DISPLACEMENT_ALLOWED = 10;\r\n\r\n    public constructor() {\r\n        this.canvas = document.createElement(\"canvas\");\r\n        this.context = this.canvas.getContext(\"2d\");\r\n    }\r\n\r\n    public detectBasePeriod(image: HTMLImageElement): number {\r\n        this.canvas.width = image.width;\r\n        this.canvas.height = image.height;\r\n        this.context.drawImage(image, 0, 0);\r\n        const imageData = this.context.getImageData(0, 0, this.canvas.width, this.canvas.height);\r\n\r\n        const MAX_TESTED_LINES_COUNT = 50;\r\n        const computeTestedLines = (): number[] => {\r\n            const result: number[] = [];\r\n            const delta = (imageData.height < MAX_TESTED_LINES_COUNT) ? 1 : (imageData.height / MAX_TESTED_LINES_COUNT);\r\n            for (let i = 0; i < imageData.height; i += delta) {\r\n                result.push(Math.floor(i));\r\n            }\r\n            return result;\r\n        };\r\n\r\n        const testedLines = computeTestedLines();\r\n\r\n        const MAX_DISPLACEMENT_ALLOWED = imageData.width / 3;\r\n\r\n        const differences = []; // displacement=0 is considered as unavailable so set a high value for it\r\n\r\n        for (let displacement = Processing.MIN_DISPLACEMENT_ALLOWED; displacement <= MAX_DISPLACEMENT_ALLOWED; displacement++) {\r\n            let totalDifference = 0;\r\n            for (const iY of testedLines) {\r\n                for (let iX = displacement; iX < imageData.width; iX++) {\r\n                    const baseIndex = 4 * (iX + iY * imageData.width);\r\n                    const targetIndex = baseIndex - 4 * displacement;\r\n\r\n                    const dRed = imageData.data[baseIndex] - imageData.data[targetIndex];\r\n                    const dGreen = imageData.data[baseIndex + 1] - imageData.data[targetIndex + 1];\r\n                    const dBlue = imageData.data[baseIndex + 2] - imageData.data[targetIndex + 2];\r\n\r\n                    const difference = (Math.abs(dRed) + Math.abs(dGreen) + Math.abs(dBlue)) / 3;\r\n                    totalDifference += difference;\r\n                }\r\n            }\r\n\r\n            const nbPixels = (testedLines.length * (imageData.width - displacement));\r\n            const averageDifference = totalDifference / nbPixels;\r\n            differences.push(averageDifference);\r\n        }\r\n\r\n        const bestDisplacement = this.computeBestDisplacement(differences) + Processing.MIN_DISPLACEMENT_ALLOWED;\r\n        return bestDisplacement;\r\n    }\r\n\r\n    private computeBestDisplacement(differences: number[]): number {\r\n        // when reaching the correct delta, on most stereograms the total difference is at its lowest, and goes right up just after\r\n        // so try to detect this point\r\n        let highestGradientIndex = 1;\r\n        let highestGradient = -1;\r\n        for (let i = 2; i < differences.length - 1; i++) {\r\n            const gradient = differences[i + 1] - differences[i];\r\n\r\n            // console.log(`${i + Processing.MIN_DISPLACEMENT_ALLOWED}:\\t${differences[i]}\\t${gradient}`);\r\n            if (gradient > highestGradient) {\r\n                highestGradientIndex = i;\r\n                highestGradient = gradient;\r\n            }\r\n        }\r\n\r\n        // The gradient helps determine the end of the lowest plateau.\r\n        // Once found, check what was just before because maybe it was better\r\n        for (let i = 0; i < 3; i++) {\r\n            if (highestGradientIndex > 0 && differences[highestGradientIndex - 1] < differences[highestGradientIndex]) {\r\n                highestGradientIndex--;\r\n            }\r\n        }\r\n        return highestGradientIndex;\r\n    }\r\n}\r\n\r\nexport {\r\n    Processing,\r\n};\r\n","function setCompositingError(): void {\r\n    const id = \"COMPOSITING_ERROR\";\r\n\r\n    if (!document.getElementById(id)) {\r\n        const errorsSection = document.getElementById(\"errors\");\r\n        const div = document.createElement(\"div\");\r\n        div.id = id;\r\n        div.textContent = \"Your browser does not support the 'difference' globalCompositeOperation. This project will not run as expected.\";\r\n        errorsSection.appendChild(div);\r\n    }\r\n\r\n}\r\n\r\nclass Visualization {\r\n    public readonly container: HTMLElement;\r\n\r\n    private readonly displacementRange: HTMLInputElement;\r\n    private readonly canvasElement: HTMLCanvasElement;\r\n    private readonly canvasContext: CanvasRenderingContext2D;\r\n\r\n    private readonly textOutputImageSize: HTMLSpanElement;\r\n    private readonly textOuputDisplacement: HTMLSpanElement;\r\n\r\n    private _displacement: number = 1;\r\n    private _image: HTMLImageElement;\r\n\r\n    public constructor() {\r\n        this.container = document.createElement(\"section\");\r\n        this.container.classList.add(\"contents-section\");\r\n\r\n        {\r\n            const textOutputContainer = document.createElement(\"div\");\r\n\r\n            const imageSize = document.createElement(\"div\");\r\n            imageSize.appendChild(document.createTextNode(\"Image size: \"));\r\n            this.textOutputImageSize = document.createElement(\"span\");\r\n            imageSize.appendChild(this.textOutputImageSize);\r\n            textOutputContainer.appendChild(imageSize);\r\n\r\n            const displacement = document.createElement(\"div\");\r\n            displacement.appendChild(document.createTextNode(\"Displacement: \"));\r\n            this.textOuputDisplacement = document.createElement(\"span\");\r\n            displacement.appendChild(this.textOuputDisplacement);\r\n            textOutputContainer.appendChild(displacement);\r\n\r\n            this.container.appendChild(textOutputContainer);\r\n        }\r\n\r\n        {\r\n            this.displacementRange = document.createElement(\"input\");\r\n            this.displacementRange.classList.add(\"full-width-range\");\r\n            this.displacementRange.type = \"range\";\r\n            this.displacementRange.min = \"0\";\r\n            this.displacementRange.max = \"100\";\r\n            this.displacementRange.step = \"1\";\r\n            this.displacementRange.value = \"1\";\r\n            const onNewDisplacement = () => {\r\n                this.displacement = +this.displacementRange.value;\r\n            };\r\n            this.displacementRange.addEventListener(\"change\", onNewDisplacement);\r\n            this.displacementRange.addEventListener(\"input\", onNewDisplacement);\r\n            this.container.appendChild(this.displacementRange);\r\n        }\r\n\r\n        this.canvasElement = document.createElement(\"canvas\");\r\n        this.canvasElement.style.maxWidth = \"100%\";\r\n        this.canvasElement.width = 100;\r\n        this.canvasElement.height = 100;\r\n        this.container.appendChild(this.canvasElement);\r\n\r\n        this.canvasContext = this.canvasElement.getContext(\"2d\");\r\n    }\r\n\r\n    public set image(image: HTMLImageElement) {\r\n        this._image = image;\r\n\r\n        this.canvasElement.width = this._image.width;\r\n        this.canvasElement.height = this._image.height;\r\n\r\n        this.displacementRange.max = this.canvasElement.width.toFixed(0);\r\n\r\n        this.textOutputImageSize.textContent = `${this._image.width}x${this._image.height}`;\r\n\r\n        this.update();\r\n    }\r\n\r\n    public set displacement(displacement: number) {\r\n        this._displacement = displacement;\r\n        this.displacementRange.value = displacement.toFixed(0);\r\n\r\n        this.textOuputDisplacement.textContent = `${displacement.toFixed(0)}px`;\r\n        this.update();\r\n    }\r\n\r\n    private update(): void {\r\n        if (this._image) {\r\n            this.canvasContext.globalCompositeOperation = \"source-over\";\r\n            this.canvasContext.drawImage(this._image, 0, 0, this.canvasElement.width, this.canvasElement.height);\r\n\r\n            if (this._displacement > 0) {\r\n                this.canvasContext.globalCompositeOperation = \"difference\";\r\n                if (this.canvasContext.globalCompositeOperation !== \"difference\") {\r\n                    setCompositingError();\r\n                }\r\n\r\n                this.canvasContext.drawImage(this._image, this._displacement, 0, this.canvasElement.width, this.canvasElement.height);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport {\r\n    Visualization,\r\n};\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { InputImage } from \"./input-image\";\r\nimport { Processing } from \"./processing\";\r\nimport { Visualization } from \"./visualization\";\r\n\r\n\r\nconst container = document.getElementById(\"contents\");\r\n\r\nconst inputImage = new InputImage();\r\nconst visualization = new Visualization();\r\nconst processing = new Processing();\r\n\r\ncontainer.appendChild(inputImage.container);\r\ncontainer.appendChild(visualization.container);\r\n\r\nlet rawImage: HTMLImageElement;\r\nconst sourceImageSection = document.createElement(\"section\");\r\n{\r\n    sourceImageSection.classList.add(\"contents-section\");\r\n    const description = document.createElement(\"div\");\r\n    description.textContent = \"Source image:\";\r\n    sourceImageSection.appendChild(description);\r\n    sourceImageSection.appendChild(description);\r\n    container.appendChild(sourceImageSection);\r\n}\r\n\r\nfunction onNewImage(): void {\r\n    const image = inputImage.image;\r\n    if (image) {\r\n        visualization.image = image;\r\n        visualization.displacement = processing.detectBasePeriod(image);\r\n\r\n        if (rawImage) {\r\n            rawImage.parentElement.removeChild(rawImage);\r\n        }\r\n        rawImage = image;\r\n        rawImage.style.maxWidth = \"100%\";\r\n        sourceImageSection.appendChild(rawImage);\r\n    }\r\n}\r\n\r\ninputImage.onChangeObservers.push(onNewImage);\r\nonNewImage();\r\n"],"names":["setFailedToLoadError","url","id","div","document","getElementById","errorsSection","createElement","appendChild","style","display","textContent","SELECT_DEFAULT_VALUE","onChangeObservers","this","container","classList","add","presetSelect","options","buildOption","value","label","option","select","defaultOption","disabled","hidden","buildSelect","addEventListener","onPresetChange","presetContainer","presetLabel","htmlFor","uploadFileButton","fileInputContainer","type","accept","event","stopPropagation","files","length","FileReader","onload","image","Image","loadedImage","callObservers","src","result","readAsDataURL","urlInput","urlInputContainer","inputContainer","placeholder","urlLoadButton","loadCrossOriginImage","preset","Page","version","loadImage","startingImage","xhr","XMLHttpRequest","reader","toString","response","open","setRequestHeader","responseType","send","observer","InputImage","canvas","context","getContext","detectBasePeriod","width","height","drawImage","imageData","getImageData","testedLines","delta","i","push","Math","floor","computeTestedLines","MAX_DISPLACEMENT_ALLOWED","differences","displacement","Processing","MIN_DISPLACEMENT_ALLOWED","totalDifference","iY","iX","baseIndex","targetIndex","dRed","data","dGreen","dBlue","abs","averageDifference","computeBestDisplacement","highestGradientIndex","highestGradient","gradient","_displacement","textOutputContainer","imageSize","createTextNode","textOutputImageSize","textOuputDisplacement","displacementRange","min","max","step","onNewDisplacement","canvasElement","maxWidth","canvasContext","_image","toFixed","update","globalCompositeOperation","setCompositingError","Visualization","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","rawImage","inputImage","visualization","processing","sourceImageSection","description","onNewImage","parentElement","removeChild"],"sourceRoot":""}